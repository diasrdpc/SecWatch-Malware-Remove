import tensorflow as tf
from PIL import Image
import numpy as np


NNSIZE = 128

# Load the trained model
model = tf.keras.models.load_model('malware_detection_model.h5')

# Define the function to convert a binary file to a 512x512 image
def get_resized_image_data(file_path, target_size=(NNSIZE, NNSIZE)):
    try:
        # Read binary data from the file
        with open(file_path, 'rb') as file:
            binary_data = file.read()

        # Calculate the size of the square image
        data_len = len(binary_data)
        side_length = int(data_len ** 0.5)
        if side_length * side_length < data_len:
            side_length += 1

        # Create a new image with white background
        image = Image.new('RGB', (side_length, side_length), (255, 255, 255))

        # Copy the binary data to the image
        for i in range(data_len):
            x = i % side_length
            y = i // side_length
            pixel_value = int.from_bytes(binary_data[i:i+1], byteorder='big')
            image.putpixel((x, y), (pixel_value, pixel_value, pixel_value))

        # Resize the image to the target size (512x512)
        resized_image = image.resize(target_size)

        # Convert the resized image to numpy array
        image_data = np.array(resized_image)

        return image_data
    except Exception as e:
        print(f"Error in get_resized_image_data for file {file_path}: {e}")
        return None

# Define a function for file-based detection
def input_file_detection(file_path):
    # Convert the test file to a 512x512 image
    test_data = get_resized_image_data(file_path)

    # Ensure the test data is not None
    if test_data is not None:
        # Normalize the image data
        test_data = test_data / 255.0

        # Make a prediction using the loaded model
        prediction = model.predict(np.expand_dims(test_data, axis=0))

        # Interpret the prediction (0: not malware, 1: malware)
        if prediction[0] >= 0.5:
            result = "Malware"
        else:
            result = "Not Malware"

        return result
    else:
        return "File read and conversion failed."




if __name__ == '__main__':
    # Prompt the user to input a file path
    file_path = "not-malware/fe1916f81158491288b43f7d028a0098.docx"
    result = input_file_detection(file_path)
    print(f"The file '{file_path}' is classified as: {result}")
