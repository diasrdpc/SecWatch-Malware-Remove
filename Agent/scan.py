import tensorflow as tf
from PIL import Image
import numpy as np
import os
import threading

NNSIZE = 128
MAX_THREADS = 10

print_lock = threading.Lock()

model = tf.keras.models.load_model('malware_detection_model.h5')

def get_resized_image_data(file_path, target_size=(NNSIZE, NNSIZE)):
    try:
        with open(file_path, 'rb') as file:
            binary_data = file.read()
        data_len = len(binary_data)
        side_length = int(data_len ** 0.5)
        if side_length * side_length < data_len:
            side_length += 1

        image = Image.new('RGB', (side_length, side_length), (255, 255, 255))

        for i in range(data_len):
            x = i % side_length
            y = i // side_length
            pixel_value = int.from_bytes(binary_data[i:i+1], byteorder='big')
            image.putpixel((x, y), (pixel_value, pixel_value, pixel_value))

        resized_image = image.resize(target_size)

        image_data = np.array(resized_image)

        return image_data
    except Exception as e:
        print(f"Error in get_resized_image_data for file {file_path}: {e}")
        return None

def input_file_detection(file_path):
    test_data = get_resized_image_data(file_path)

    if test_data is not None:
        test_data = test_data / 255.0

        prediction = model.predict(np.expand_dims(test_data, axis=0))

        if prediction[0] >= 0.5:
            result = "Malware"
        else:
            result = "Not Malware"

        return result
    else:
        return "File read and conversion failed."



def scan_dir(directory_path):
    print("Starting scan...")
    result_dict = {}

    if not os.path.exists(directory_path):
        print(f"Directory '{directory_path}' does not exist.")
        return result_dict

    if not os.path.isdir(directory_path):
        print(f"'{directory_path}' is not a directory.")
        return result_dict

    def file_processing_thread(file_path):
        result = input_file_detection(file_path)
        with print_lock:
            print(f"The file '{file_path}' is classified as: {result}")
        result_dict[os.path.basename(file_path)] = result

    files_to_process = [os.path.join(directory_path, filename) for filename in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, filename))]
    
    # Create and start threads
    threads = []
    for file_path in files_to_process:
        thread = threading.Thread(target=file_processing_thread, args=(file_path,))
        thread.start()
        threads.append(thread)

        # Ensure a maximum of MAX_THREADS threads are running concurrently
        if len(threads) >= MAX_THREADS:
            for t in threads:
                t.join()
            threads = []

    # Wait for remaining threads to finish
    for t in threads:
        t.join()

    return result_dict


def scan_file(file_path):
    print("Starting file scan")
    result = input_file_detection(file_path)
    return result



if __name__ == '__main__':
    #file_path = "not-malware/fe1916f81158491288b43f7d028a0098.docx"
    #result = input_file_detection(file_path)
    #print(f"The file '{file_path}' is classified as: {result}")

    scan_res = scan_dir("D:\\Projects\\AI-Malware Detection\ML\\malware\\")
    print(scan_res)
