import redis
import threading
from scan import scan_dir, scan_file

# Connect to the Redis server
redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)

delimeter = ":#:"
agentName = "agent1"
server_up_channel = 'svr-up'
server_down_channel = 'svr-down'


def messageHandler(message):
    messageParams = message.split(delimeter)
    print(messageParams)
    if(messageParams[0] == "ALL"):
        if(messageParams[1] == "PING"):
            client_producer("RES", "PONG")
        
        elif(messageParams[1] == "SCAN_DIR"):
            res = scan_dir(messageParams[2])
            client_producer("SCAN_DIR_RES", res)
        
        elif(messageParams[1] == "SCAN_FILE"):
            res = scan_file(messageParams[2])
            client_producer("SCAN_DIR_RES", res)

    elif(messageParams[0] == agentName):
        if(messageParams[1] == "PING"):
            client_producer("RES", "PONG")
        
        elif(messageParams[1] == "STATUS"):
            client_producer("RES", "ok")
        
        elif(messageParams[1] == "SCAN_DIR"):
            res = scan_dir(messageParams[2])
            client_producer("SCAN_DIR_RES", res)
        
        elif(messageParams[1] == "SCAN_FILE"):
            res = scan_file(messageParams[2])
            client_producer("SCAN_DIR_RES", res)

# Producer function for the client
def client_producer(param, message):
    formattedMessage = f"{agentName}:{param}:{message}"
    redis_client.publish(server_up_channel, formattedMessage)

# Consumer function for the client
def client_consumer():
    pubsub = redis_client.pubsub()
    pubsub.subscribe(server_down_channel)

    for message in pubsub.listen():
        if message['type'] == 'message':
            received_message = message['data'].decode('utf-8')
            #print(f"Client (Consume): {received_message}")

            message_handler_thread = threading.Thread(target=messageHandler, args=(received_message,))
            message_handler_thread.start()


if __name__ == '__main__':
    consumer_thread = threading.Thread(target=client_consumer)
    consumer_thread.start()
    consumer_thread.join()
